// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parser.Models;

namespace Parser.Migrations
{
    [DbContext(typeof(FileParserContext))]
    partial class FileParserContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Parser.Models.MainChunk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FXSettlementDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FinancialInstitution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PageUploadTransactionId")
                        .HasColumnType("int");

                    b.Property<string>("ReconciliationCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReconciliationFileID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionCurrency")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PageUploadTransactionId");

                    b.ToTable("MainChunks");
                });

            modelBuilder.Entity("Parser.Models.MainChunkDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountTotal")
                        .HasColumnType("int");

                    b.Property<double>("FeeAmountCredit")
                        .HasColumnType("float");

                    b.Property<double>("FeeAmountDebit")
                        .HasColumnType("float");

                    b.Property<int>("MainChunkId")
                        .HasColumnType("int");

                    b.Property<double>("NetValue")
                        .HasColumnType("float");

                    b.Property<double>("ReconciliationAmntCredit")
                        .HasColumnType("float");

                    b.Property<double>("ReconciliationAmntDebit")
                        .HasColumnType("float");

                    b.Property<string>("SettlementCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TransactionAmountCredit")
                        .HasColumnType("float");

                    b.Property<double>("TransactionAmountDebit")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MainChunkId");

                    b.ToTable("MainChunkDetails");
                });

            modelBuilder.Entity("Parser.Models.PageUploadTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("PageUploads");
                });

            modelBuilder.Entity("Parser.Models.MainChunk", b =>
                {
                    b.HasOne("Parser.Models.PageUploadTransaction", "PageUploadTransaction")
                        .WithMany("MainChunks")
                        .HasForeignKey("PageUploadTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Parser.Models.MainChunkDetail", b =>
                {
                    b.HasOne("Parser.Models.MainChunk", "MainChunk")
                        .WithMany("ChunkDetails")
                        .HasForeignKey("MainChunkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
